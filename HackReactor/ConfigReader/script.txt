Unit testing revitalized my coding career...

At first it was difficult to create unit tests because my code was too tightly coupled to external dependencies. Here’s an example, a simple class for reading configuration settings from a text file. The code that opens the file and reads its contents is making calls to the file system, an external dependency. I could write an integration test to exercise this code against a file on a disk, but that makes for a slower and less portable test.

Here’s a refactored version of the class that uses a dependency injection container to reduce coupling. This code fetches an implementation of the stream reader that was loaded previously by the caller. The production caller loads a genuine implementation that interacts with the file system. The test caller loads a mock implementation, one that simulates external calls and records them to be verified by the unit test.

Enjoy this powerful technique!